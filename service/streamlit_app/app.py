import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from sklearn.metrics import confusion_matrix, roc_auc_score, plot_confusion_matrix
import streamlit as st
import joblib


try:
    df = pd.read_csv("/app/streamlit_app/data/telecom_custumerDB.csv", encoding="utf-8")
except Exception as e:
    print(f"Erreur lors de la lecture du fichier : {e}")

st.sidebar.title("Sommaire:")

pages = ["Contexte du projet", "Exploration des donn√©es", "Data visualisation", "Modele performance"]

page = st.sidebar.radio("Aller vers la page :", pages)

if page == pages[0] : 
    st.title("Contexte du projet")

    # Titre de l'application
    st.title("Fid√©lisation Client√®le et Pr√©diction du D√©sabonnement")

    # Introduction
    st.write("Bienvenue dans un projet passionnant au c≈ìur de la fid√©lisation client√®le de RoyalTelecom, une entreprise de t√©l√©communication √©tablie dans les pittoresques Alpes-Maritimes. Face √† une concurrence intense offrant des services plus comp√©titifs, RoyalTelecom se lance dans une qu√™te continue de nouveaux clients. Cependant, elle se rend compte que le co√ªt d'acquisition de nouveaux clients est √©tonnamment √©lev√© par rapport au co√ªt de r√©tention.")

    # Enjeu et probl√©matique
    st.markdown("### Probl√©matique")
    st.write("L'enjeu ? Fid√©liser la client√®le existante.")
    st.write("L'√©pineuse question √† laquelle nous devons r√©pondre : comment retenir nos clients actuels dans un monde o√π les alternatives abondent ? Pour r√©soudre ce d√©fi, nous devons plonger dans l'analyse des comportements clients, comprendre leurs besoins sp√©cifiques et d√©velopper des offres sur mesure.")

    # Mission du data scientist
    st.write("En tant que data scientist, je suis missionn√© par RoyalTelecom pour transformer cette vision en r√©alit√©. Notre objectif central est de pr√©dire avec pr√©cision si un client choisira de r√©silier son contrat √† la fin de l'√©ch√©ance. Cette pr√©diction √©clair√©e nous permettra d'anticiper les besoins du client et de lui offrir des services adapt√©s, renfor√ßant ainsi notre relation avec lui.")

    # Exploration des donn√©es
    st.markdown("### Exploration des Donn√©es")
    st.write("Notre aventure commence par l'exploration approfondie des donn√©es historiques des clients. Chaque ligne de ce tr√©sor d'informations repr√©sente un client unique, et chaque colonne expose une facette de sa relation avec RoyalTelecom. Une plong√©e visuelle dans ces donn√©es nous r√©v√©lera des tendances, des motifs et des opportunit√©s cach√©es.")

    # Analyse des insights
    st.markdown("### Analyse des Insights")
    st.write("Le prochain chapitre ? L'analyse approfondie des insights tir√©s de ces donn√©es. Nous allons d√©cortiquer les comportements des clients, identifier les signaux faibles et les points forts, afin de mieux comprendre ce qui incite un client √† rester fid√®le ou √† envisager la d√©sertion.")

    # Mise en ≈ìuvre de l'intelligence artificielle
    st.markdown("### Mise en ≈ìuvre de l'Intelligence Artificielle")
    st.write("Enfin, le moment tant attendu de la mise en ≈ìuvre de l'intelligence artificielle. Des mod√®les de Machine Learning de pointe seront d√©ploy√©s pour pr√©dire le risque de d√©sabonnement de chaque client. Une avanc√©e technologique qui permettra √† RoyalTelecom d'anticiper les mouvements du march√© et d'ajuster ses offres en cons√©quence.")

    # Conclusion
    st.write("Accrochez-vous, car ce projet promet des rebondissements, des d√©couvertes fascinantes et, surtout, la cl√© pour maintenir la satisfaction client √† des sommets inexplor√©s. Pr√™ts √† plonger dans l'avenir de la fid√©lisation client√®le ? Let the data journey begin! üöÄ‚ú®")


elif page == pages[1]:
    st.write("### Exploration des donn√©es")
    
    dfEst = df
    def statics():
        dfEst['Churn'].replace({'Yes': 1, 'No': 0}, inplace=True)

        num_retained = dfEst[dfEst.Churn == 0.0].shape[0]
        num_churned = dfEst[dfEst.Churn == 1.0].shape[0]
        retined = num_retained / (num_retained + num_churned) * 100
        churned = num_churned / (num_retained + num_churned) * 100

        col1, col2 = st.columns(2)
        col1.metric("Clients rest√©s avec l'entreprise :", round(retined, 2), "%")
        col2.metric("Clients partis de l'entreprise :", round(churned, 2), "%", delta_color='inverse')


    statics()

# Utilisation de st.expander pour les statistiques
    with st.expander("Statistiques", expanded=True):
       if st.checkbox("Afficher les statistiques"):

         col1, col2, col3, col4 = st.columns(4)
         if col1.button("Head"):
             st.write("20 premi√®res lignes du Datasets :")
             st.write(df.head(20))

         if col2.button("Tail"):
             st.write("20 derni√®res lignes du Datasets :")
             st.write(df.tail(20))

         if col3.button("Colonnes"):
             columns = df.columns
             mid_index = len(columns) // 4
             part1, part2, part3, part4 = columns[:mid_index], columns[mid_index:2*mid_index], columns[2*mid_index:3*mid_index], columns[3*mid_index:]

             col1, col2, col3, col4 = st.columns(4)

             # Affichage des noms de colonnes dans les diff√©rentes colonnes
             col1.write(part1)
             col2.write(part2)
             col3.write(part3)
             col4.write(part4)

         if col1.button("Description"):
             st.write(df.describe(include='all'))

         if col2.button("Shape"):
             st.write("Nombre de lignes", df.shape[0])
             st.write("Nombre de colonnes", df.shape[1])

elif page == pages[2]:
    st.write("### Analyse de donn√©es")

    # Plot churned
    with st.expander("Data visualization ", expanded=True):
        churned_charts = st.checkbox('Graphique, repartition de la variable cible')
        if churned_charts:
            chart_option = st.radio('Churned:', ['Diagramme en barres', 'Diagramme circulaire (Pie)'])

            if chart_option == 'Diagramme en barres':
                plot_churned = df['Churn'].value_counts()

                colors = ['#e74c3c', '#3498db']  # Couleurs pour Churn et No Churn respectivement

                fig = px.bar(x=plot_churned.index, y=plot_churned.values, color=plot_churned.index, text=plot_churned.values,
                            labels={'x': 'Churn', 'y': 'Nombre', 'color': 'Status'},
                            color_discrete_sequence=colors)

                fig.update_traces(texttemplate='%{text:.2s}', textposition='outside')

                st.plotly_chart(fig)


            if chart_option == 'Diagramme circulaire (Pie)':
               # Diagramme circulaire churn
               pie_chart = px.pie(df, 
                                 names="Churn", 
                                 title="Diagramme circulaire sur le d√©sabonnement (Churn)",
                                 color_discrete_sequence=['#3498db', '#e74c3c'],
                                 hole=0.4,
                                 labels={'1': 'D√©sabonn√©', '0': 'Abonn√©'},
                                 )
               st.plotly_chart(pie_chart)
  
        load = st.checkbox('Chargez les graphiques, variables independante Vs variable cible')
        if load:
            option = st.selectbox("Choisissez une option :", ["Gender", "SeniorCitizen", "Partner", "Dependents", "PhoneService",
                             "InternetService", "DeviceProtection", "TechSupport"])
             
            mid_index = len(option) // 4
            part1, part2, part3, part4 = option[:mid_index], option[mid_index:2*mid_index], option[2*mid_index:3*mid_index], option[3*mid_index:]

            col1, col2, col3, col4 = st.columns(4)

             # Affichage des noms de colonnes dans les diff√©rentes colonnes
            col1.write(part1)
            col2.write(part2)
            col3.write(part3)
            col4.write(part4)

            if col1.button("Gender"):
                st.subheader("Exploration de la variable 'Genre':")

                # Informations sur la variable 'Genre'
                st.write("- Nous comptons 3 488 femmes dans notre √©chantillon, dont 2 549 restent fid√®les, repr√©sentant un taux moyen de fid√©lit√© de 73,08%.")
                st.write("- De m√™me, l'√©chantillon comprend 3 555 hommes, parmi lesquels 2 625 ne se d√©sabonnent pas.")
                st.write("- Le taux moyen de d√©sabonnement chez les hommes est l√©g√®rement plus √©lev√© √† 73,83%.")
                st.write("- √âtonnamment, le taux de d√©sabonnement semble comparable entre hommes et femmes, sugg√©rant que le genre n'a pas d'impact significatif sur la d√©cision de rompre un abonnement, comme le confirme notre graphique.")
                # plot churned clients by gender
                fig = px.histogram(df, x='gender', color='Churn', barmode='group')
                fig.update_layout(
                    title="Diagramme en barres des clients d√©sabonn√©s par genre",
                    xaxis_title="Genre",
                    yaxis_title="Nombre de clients",
                    legend_title='D√©sabonnement'
                    )
    
                st.plotly_chart(fig)

            if col2.button('SeniorCitizen'):
                st.subheader("Analyse des Clients Seniors :")

                # Informations sur la variable 'Senior Citizen'
                st.write("- √Ä travers nos donn√©es, un constat frappant se d√©gage : le taux de d√©sabonnement est plus faible chez les clients plus √¢g√©s que chez les plus jeunes.")
                st.write("- Sur les 7 043 clients, 4 508 sont des clients seniors qui restent fid√®les, repr√©sentant en moyenne 58,31% de fid√©lit√©, tandis que 1 393 clients plus jeunes ne se d√©sabonnent pas.")
                st.write("- Si l'on regarde du c√¥t√© des clients qui se d√©sabonnent, 476 sont des clients seniors, contre 666 clients plus jeunes.")
                st.write("- Les clients plus jeunes semblent donc pr√©senter un risque de d√©sabonnement plus √©lev√©. Notre graphique illustre clairement que l'√¢ge est un facteur d√©terminant : plus le client est √¢g√©, moins il est susceptible de se d√©sabonner.")
                # Plot churned clients by SeniorCitizen
                fig = px.histogram(df, x='SeniorCitizen', color='Churn', barmode='group',
                                   labels={'SeniorCitizen': 'SeniorCitizen', 'Churn': 'D√©sabonnement', 'count': 'Nombre de clients'},
                                   title="Diagramme interactif des clients d√©sabonn√©s par SeniorCitizen",
                                   category_orders={'SeniorCitizen': ['0', '1'], 'Churn': ['No', 'Yes']},
                                   color_discrete_map={'No': 'cyan', 'Yes': 'gold'})
                fig.update_layout(bargap=0.2)
                st.plotly_chart(fig)

            if col3.button("Partner"):
                st.subheader("Analyse de la Situation Matrimoniale des Clients :")

                # Informations sur la variable 'Partner'
                st.write("- Ce graphique r√©v√®le des informations particuli√®rement intrigantes sur la situation matrimoniale des clients en lien avec notre variable cible.")
                st.write("- Il est clair que les clients mari√©s ont consid√©rablement moins de chances de se d√©sabonner que leurs homologues c√©libataires.")
                st.write("- Ces donn√©es nous offrent une opportunit√© pr√©cieuse pour optimiser nos campagnes marketing. En ciblant davantage les jeunes c√©libataires, nous pourrions ajuster nos offres, anticipant ainsi leur propension plus √©lev√©e √† se d√©sabonner.")
                # Trac√© des clients r√©sili√©s par partenaire
                fig = px.histogram(df, x='Partner', color='Churn', barmode='group',
                                   labels={'Partner': 'maried', 'Churn': 'D√©sabonnement', 'count': 'Nombre de clients'},
                                   title="Diagramme interactif de desabonnement des clients en fonction de leur situation marietale",
                                   category_orders={'Partner': ['No', 'Yes'], 'Churn': ['No', 'Yes']},
                                   color_discrete_map={'No': 'darkgray', 'Yes': 'firebrick'})
                fig.update_layout(bargap=0.2)
                st.plotly_chart(fig)

            if col4.button("Dependents"):
                st.subheader("Analyse de la Pr√©sence de Personnes √† Charge :")

                # Informations sur la variable 'Dependents'
                st.write("- Parmi les 2 110 clients ayant des personnes √† charge, seuls 326 ont r√©sili√©, affichant un remarquable taux moyen de non-r√©siliation de 84,54%.")
                st.write("- En revanche, sur les 4 933 clients sans personne √† charge, le taux moyen de r√©siliation s'√©l√®ve √† 68,72%.")
                st.write("- La r√©siliation est donc plus rapide en moyenne chez les clients sans personne √† charge, une donn√©e cruciale √† consid√©rer lors de la planification d'√©ventuelles campagnes de r√©tention client.")
                fig = px.histogram(df, x='Dependents', color='Churn', barmode='group',
                                   labels={'Dependents': 'Personne a charge', 'Churn': 'D√©sabonnement', 'count': 'Nombre de clients'},
                                   title="Diagramme de desabonnement des clients en fonction du nombre de personne a charge",
                                   category_orders={'Dependents': ['No', 'Yes'], 'Churn': ['No', 'Yes']},
                                   color_discrete_map={'No': 'goldenrod', 'Yes': 'fuchsia'})
                fig.update_layout(bargap=0.2)
                st.plotly_chart(fig)

            if col1.button("PhoneService"):
                st.subheader("Analyse du Service T√©l√©phonique :")

                # Informations sur la variable 'PhoneService'
                st.write("- Parmi les 682 clients sans service t√©l√©phonique, 170 ont r√©sili√©, affichant un taux moyen de 75,07%.")
                st.write("- En revanche, parmi les 6 361 clients disposant du service t√©l√©phonique, 4 662 n'ont pas r√©sili√©, affichant un taux moyen de 73,29% de non-r√©siliation.")
                st.write("- Les personnes ayant souscrit √† des services t√©l√©phoniques suppl√©mentaires ont une propension plus √©lev√©e √† se d√©sabonner. On peut envisager que plus le co√ªt de l'abonnement est √©lev√©, plus les gens sont susceptibles de r√©silier.")
                # plot churned clients by phoneservice
                fig = px.histogram(df, x='PhoneService', color='Churn', barmode='group',
                                   labels={'PhoneService': 'PhoneService', 'Churn': 'D√©sabonnement', 'count': 'Nombre de clients'},
                                   title="Diagramme de desabonnement des clients en fonction des services telephoniques souscrit",
                                   category_orders={'PhoneService': ['No', 'Yes'], 'Churn': ['No', 'Yes']},
                                   color_discrete_map={'No': 'cyan', 'Yes': 'fuchsia'})
                fig.update_layout(bargap=0.2)
                st.plotly_chart(fig)

            if col2.button("InternetService"):
                st.subheader("Analyse du Service Internet :")

                # Informations sur la variable 'InternetService'
                st.write("- Selon nos donn√©es, parmi les 7 043 clients, 2 421 ont des services DSL, 3 096 ont la fibre optique et 1 526 n'ont pas de service Internet.")
                st.write("- Pour les clients avec le service DSL, le taux moyen de non-d√©sabonnement atteint 81,04%, tandis que pour ceux avec la fibre optique, le taux moyen de d√©sabonnement est de 58,10%. D'autre part, 92,59% de ceux sans service Internet sont moins enclins √† se d√©sabonner.")
                st.write("- Il est √©vident qu'une attention particuli√®re doit √™tre accord√©e aux abonn√©s de la fibre optique, car ils pr√©sentent un taux moyen de d√©sabonnement plus √©lev√©.")
                # plot churned clients by InternetService
                fig = px.histogram(df, x='InternetService', color='Churn', barmode='group',
                                   labels={'InternetService': 'PhoneService', 'Churn': 'D√©sabonnement', 'count': 'Nombre de clients'},
                                   title="Diagramme de desabonnement des clients en fonction du fournisseur de service",
                                   category_orders={'InternetService': ['No', 'Yes'], 'Churn': ['No', 'Yes']},
                                   color_discrete_map={'No': 'darkolivegreen', 'Yes': 'gold'})
                fig.update_layout(bargap=0.2)
                st.plotly_chart(fig)

            if col3.button("DeviceProtection"):
                st.subheader("Analyse de la Protection des Appareils :")

                # Informations sur la variable 'Device Protection'
                st.write("- En ce qui concerne la protection des appareils, on compte 3 095 clients sans protection d'appareil, affichant un taux moyen de non-r√©siliation de 60,87%, avec 939 r√©siliations.")
                st.write("- De plus, parmi les 1 526 clients sans service Internet, 113 ont r√©sili√©, affichant un taux moyen de non-r√©siliation de 92,59%.")
                st.write("- Sur les 2 422 clients avec une protection d'appareil, 1 877 n'ont pas r√©sili√© et 545 ont r√©sili√©, donnant un taux moyen de non-r√©siliation de 77,49%.")
                st.write("- Le taux moyen de r√©siliation le plus √©lev√© concerne ceux sans protection d'appareil. La soci√©t√© devrait concentrer ses efforts sur cette cat√©gorie pour √©viter de perdre des clients.")
                # tracer les clients r√©sili√©s par protection d'appareil
                fig = px.histogram(df, x='DeviceProtection', color='Churn', barmode='group',
                                   labels={'DeviceProtection': 'DeviceProtection', 'Churn': 'D√©sabonnement', 'count': 'Nombre de clients'},
                                   title="Diagramme de desabonnement des clients en fonction des services suplementaire souscritent(protection contre la fraud)",
                                   category_orders={'DeviceProtection': ['No', 'Yes'], 'Churn': ['No', 'Yes']},
                                   color_discrete_map={'No': 'lightslategrey', 'Yes': 'lightcyan'})
                fig.update_layout(bargap=0.2)
                st.plotly_chart(fig)

            if col4.button("TechSupport"):
                st.subheader("Analyse du Support Technique :")

                # Informations sur la variable 'TechSupport'
                st.write("- Parmi les 7 043 clients, 2 044 ont souscrit au service de support technique. Parmi eux, 1 734 n'ont pas r√©sili√©, affichant un taux moyen de non-r√©siliation de 84,83%, tandis que 310 ont r√©sili√©.")
                st.write("- En revanche, parmi les 1 526 clients sans support technique, 1 413 n'ont pas r√©sili√©, avec seulement 113 r√©siliations, affichant un taux moyen de non-r√©siliation de 92%.")
                st.write("- Les clients sans support technique pr√©sentent un taux moyen de r√©siliation plus √©lev√©, sugg√©rant qu'ils sont plus susceptibles de r√©silier.")
                # plot churned clients by TechSupport
                plt.figure(figsize=(15, 10))
                sns.countplot(x='TechSupport', hue='Churn', data=df)
                st.pyplot(plt)
                fig = px.histogram(df, x='TechSupport', color='Churn', barmode='group',
                                   labels={'TechSupport': 'TechSupport', 'Churn': 'D√©sabonnement', 'count': 'Nombre de clients'},
                                   title="Diagramme de desabonnement des clients en fonction de la souscription a un support technique",
                                   category_orders={'TechSupport': ['No', 'Yes'], 'Churn': ['No', 'Yes']},
                                   color_discrete_map={'No': 'gold', 'Yes': 'darkgray'})
                fig.update_layout(bargap=0.2)
                st.plotly_chart(fig)

        
        matrix = st.checkbox('Chargez la matrix de correlation')
        if matrix:
            numerical_data = df.select_dtypes(include=['float64', 'int64'])
            correlation_matrix = numerical_data.corr()
            correlation_matrix = correlation_matrix.round(2)
            text_values = correlation_matrix.applymap(lambda x: f"{x:.2%}")

            # Cr√©ation de la figure Plotly
            fig = make_subplots(rows=1, cols=1, subplot_titles=["Matrice de Corr√©lation"])

            heatmap = go.Heatmap(
                z=correlation_matrix.values,
                x=correlation_matrix.columns,
                y=correlation_matrix.index,
                colorscale='bluered',
                zmin=-1,
                zmax=1,
                text=text_values.values,
                hoverinfo="text+z",
            )

            fig.add_trace(heatmap)

            # Mise en forme de la figure
            fig.update_layout(
                title='Matrice de Corr√©lation',
                width=800,
                height=600,
                xaxis=dict(tickangle=-45),
            )

            # Affichage de la figure Plotly avec Streamlit
            st.plotly_chart(fig)
    

        barplot = st.checkbox('Chargez les graphiques de la distribution des variables')
        if barplot:
            numerical_data = ['tenure', 'MonthlyCharges', 'TotalCharges']
            df['TotalCharges'] = pd.to_numeric(df['TotalCharges'], errors='coerce')
            barplot_option = st.radio('choose:', ['Histogrammes', 'Boxplot'])

            if barplot_option == 'Histogrammes':
                def hist_plot(Variable):
                    fig = px.histogram(df, x=Variable, title=f'Histogram of {Variable}')
                    st.plotly_chart(fig)
                selected_variable = st.sidebar.selectbox("S√©lectionnez la variable", numerical_data)
                hist_plot(selected_variable)

            if barplot_option == 'Boxplot':
                def box_plot(Variable):
                    st.title(f'Boxplot de {Variable}')
                    fig = px.box(df, y=Variable, points="all", title=f'Boxplot de {Variable}')
                    st.plotly_chart(fig)
                selected_variable = st.sidebar.selectbox("S√©lectionnez la variable", numerical_data)
                box_plot(selected_variable)

        
        violonplot = st.checkbox('Chargez les violons, variables independantes Vs Churn')
        if violonplot:
            numerical_data = ['tenure', 'MonthlyCharges', 'TotalCharges']
            df['TotalCharges'] = pd.to_numeric(df['TotalCharges'], errors='coerce')

            violonlot_option = st.radio('choose violonplot:', ['TotalCharges Vs Churn', 'MonthlyCharges Vs Churn', 'tenure Vs Churn'])

            if violonlot_option == 'TotalCharges Vs Churn':
                filtered_df = df.dropna(subset=['TotalCharges'])
                fig = px.violin(filtered_df, x='Churn', y='TotalCharges', color='Churn', box=True, points="all", title='Graphique de violon - TotalCharges Vs Churn')
                st.plotly_chart(fig)

            elif violonlot_option == 'MonthlyCharges Vs Churn':
                fig = px.violin(df, x='Churn', y='MonthlyCharges', color='Churn', box=True, points="all", title='Graphique de violon - MonthlyCharges Vs Churn')
                st.plotly_chart(fig)

            elif violonlot_option == 'tenure Vs Churn':
                fig = px.violin(df, x='Churn', y='tenure', color='Churn',box=True, points="all", title='Graphique de violon - tenure Vs Churn')
                st.plotly_chart(fig) 



elif page == pages[3]:
    st.write("### Performance modele")

    train_feature_down = pd.read_csv("/app/streamlit_app/data/train_feature_down.csv")
    train_labels_down = pd.read_csv("/app/streamlit_app/data/train_labels_down.csv")
    val_labels = pd.read_csv("/app/streamlit_app/data/val_labels.csv")
    val_feature = pd.read_csv("/app/streamlit_app/data/val_feature.csv")

    # Charger les mod√®les
    logreg_model = joblib.load("/app/streamlit_app/modeles/logreg_model.joblib")
    rf_model = joblib.load("/app/streamlit_app/modeles/rf_model.joblib")
    xgboost_model = joblib.load("/app/streamlit_app/modeles/xgboost_model.joblib")

    # Fonction pour entra√Æner le mod√®le s√©lectionn√©
    def train_model(model_choisi, y_pred_reg, y_pred_rf, y_pred_xgboost, val_labels, val_feature):
        if model_choisi == 'Regression Logistique':
            model = logreg_model
            y_pred = y_pred_reg
        elif model_choisi == 'Random Forest':
            model = rf_model
            y_pred = y_pred_rf
        elif model_choisi == 'XGboost':
            model = xgboost_model
            y_pred = y_pred_xgboost

        # Calculer et renvoyer l'AUC
        auc_score = roc_auc_score(val_labels, y_pred)

        # Limiter √† 2 chiffres apr√®s la virgule
        auc_score = round(auc_score, 2)

        # Afficher la matrice de confusion
        st.write("Matrice de Confusion:")
        confusion_mat = confusion_matrix(val_labels, (y_pred > 0.5))  # Vous pouvez ajuster le seuil si n√©cessaire
        st.table(confusion_mat)

        # Tracer la matrice de confusion
        st.write("Graphe de Matrice de Confusion:")
        fig, ax = plt.subplots()
        plot_confusion_matrix(model, val_feature, val_labels, ax=ax)
        st.pyplot(fig)

        # Tracer le graphe de pr√©diction
        st.write("Graphe de Pr√©diction:")
        fig_pred, ax_pred = plt.subplots()
        ax_pred.scatter(val_labels, y_pred)
        ax_pred.set_xlabel("Labels R√©els")
        ax_pred.set_ylabel("Pr√©dictions")
        ax_pred.set_title("Graphe de Pr√©diction")
        ax_pred.grid(True)
        st.pyplot(fig_pred)

        return auc_score

    # Faire des pr√©dictions avec chaque mod√®le
    y_pred_reg = logreg_model.predict(val_feature)
    y_pred_rf = rf_model.predict(val_feature)
    y_pred_xgboost = xgboost_model.predict(val_feature)

    # Interface utilisateur pour choisir le mod√®le
    model_choisi = st.selectbox(label="Mod√®le", options=['Regression Logistique', 'Random Forest', 'XGboost'])

    # Afficher le r√©sultat
    st.write("AUC Score:", train_model(model_choisi, y_pred_reg, y_pred_rf, y_pred_xgboost, val_labels, val_feature))


